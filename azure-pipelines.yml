name: Terraform pipeline

trigger:
  - master

stages:
  - stage: TerraformPlan
    jobs:
      - job: Terraform_Plan
        displayName: Terraform Plan
        continueOnError: false
        pool:
          vmImage: ubuntu-latest
        steps:
          - script: |
              cd ..
              mkdir artifact-directory    
            displayName: Making Artifact Directory 

          - script: |
              files=$(git diff-tree --no-commit-id --name-only -r $(Build.SourceVersion))
              for file in $files
              do
                parsed_file=${file##*/}
                if [[ "$parsed_file" =~ .(tf|tfvars|hcl)$ ]]; then
                  parsed_path=${file%/*}
                  echo "Terraform configuration file changes found: ${parsed_path}"
                  echo "##vso[task.setvariable variable=tf_path]$parsed_path"
                  echo "##vso[task.setvariable variable=tf_config_validated]2"
                else
                  echo "No Terraform configuration file changes found"
                fi
              done
            displayName: Evaluating Commit for Terraform Configuration Changes

          - task: TerraformInstaller@0
            displayName: Use latest Terraform
            inputs:
              terraformVersion: latest
            condition: eq(variables['tf_config_validated'], '2')

          - script: |
              terraform init
              terraform plan -out=terraform.plan -input=false
              tf_plan_path=$(find . -name terraform.plan -printf '%h\n')
              echo $tf_plan_path
              echo "terraform.plan file located: ${tf_plan_path}/terraform.plan"
              echo "##vso[task.setvariable variable=tf_plan_path;isOutput=true]$tf_plan_path"
              echo "##vso[task.setvariable variable=tf_plan_generated]2"
            workingDirectory: '$(Build.SourcesDirectory)/$(TF_PATH)'
            displayName: Initialize Terraform\Terragrunt
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
            condition: eq(variables['tf_config_validated'], '2')

          - script: |
              base=$(basename $PWD)
              cd ..
              tar -czf $base.tar.gz $base
              mv -f $base.tar.gz artifact-directory/
            displayName: Compressing Terraform Configuration files
            condition: eq(variables['tf_plan_generated'], '2')

          - task: PublishPipelineArtifact@0
            inputs:
              artifactName: terraform-plan-artifact
              targetPath: '../artifact-directory'
            condition: eq(variables['tf_plan_generated'], '2')

  - stage: TerraformApply
    dependsOn: TerraformPlan
    jobs:
    - deployment: Terraform_Apply
      displayName: Applying Terraform Configuration
      pool:
        vmImage: ubuntu-latest
      environment: 'Terraform-Apply-Manual'
      strategy:
        runOnce:
          deploy:
            steps:
              - script: |
                  base=$(basename $PWD)
                  cd ../terraform-plan-artifact
                  tar -xvf $base.tar.gz
                  ls -lh
                displayName: Decomressing Terraform Plan Artifact


              - script: |
                  cd ../terraform-plan-artifact
                  echo "Finding Current Terraform build Directory"
                  terraform_plan_path=$(find . -name terraform.plan -printf '%h\n')
                  echo $terraform_plan_path
                  echo "##vso[task.setvariable variable=terraform_plan_path]$terraform_plan_path"
                displayName: Locate Configuration Path via Terraform plan file

              - script: |
                  echo 'Applying Terraform Plan File...'
                  terraform apply -auto-approve
                workingDirectory: '../terraform-plan-artifact/$(terraform_plan_path)'
                displayName: Apply Terraform Configurtion Changes
                env:
                  AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
                  AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
